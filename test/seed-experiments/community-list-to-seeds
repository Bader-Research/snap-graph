#!/usr/bin/perl -w

# Usage:
#   ./comm-to-seed [# seeds, default 3] [file]
# The following are equivalent:
#   ./comm-to-seed 3 output.txt
#   ./comm-to-seed output.txt
#   ./comm-to-seed 3 < output.txt
#   ./comm-to-seed < output.txt

use strict;

my $NSEEDS = 3;
if ($#ARGV >= 0) {
    if ($ARGV[0] =~ /\d+/) {
	$NSEEDS = int (shift @ARGV);
    }
}

# Input sample:
# Number of communities: 2523
# Modularity score: 0.164786 (full), 0.160297 (w/o dup)
#
# <Vertex ID> <Community ID>
#
#    0  818

my @csize;
my %community;

while (<>) {
    my ($v, $c);
    if (/^\s*(\d+)\s+(\d+)$/) {
	$v = int $1;
	$c = int $2;
	if (exists $community{$c}) {
	    push @{$community{$c}}, $v;
	} else {
	    $community{$c} = [$v];
	}
	++$csize[$c];
    }
}

# Find the second largest community

my $largest;
my $secondlargest;
my $sz = 0;
my $sz2 = 0;
while (my ($key, $value) = each %community) {
    my $L = scalar @{$value};
    if (exists $ENV{"VERBOSE"} && $L > 1) { print STDERR "comm: $key size: $L\n"; }
    if ($L > $sz2) {
      if ($L > $sz) { $secondlargest = $largest; $sz2 = $sz; $largest = $key; $sz = $L; }
      else { $secondlargest = $key; $sz2 = $L; }
    }
}
die "No communities?" unless defined $largest;
die "No communities of size at least $NSEEDS." unless $sz >= $NSEEDS;

if (exists $ENV{"HIST"}) {
  my %hist;
  my $maxsize = 0;
  while (my ($key, $value) = each %community) {
    my $sz = scalar @{$value};
    if ($sz > $maxsize) { $maxsize = $sz; }
    if (exists $hist{$sz}) { ++$hist{$sz}; } else { $hist{$sz} = 1; }
  }
  print STDERR sprintf("%-6d\n", $maxsize);
  for (my $i = 1; $i <= $maxsize; ++$i) {
    if (exists $hist{$i}) {
      print STDERR sprintf("%-4d: %-6d\n", $i, $hist{$i});
    }
  }
}

# Permute
my @V = @{$community{$secondlargest}};
for (my $i = 0; $i <= $#V; ++$i) {
    my $toswap = int (rand ($#V - $i + 1));
    my $tmp = $V[$toswap];
    $V[$toswap] = $V[$i];
    $V[$i] = $tmp;
}

# Select
print join(" ", @V[0..($NSEEDS-1)]), "\n";
